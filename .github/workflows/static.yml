# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # Run daily at midnight to fetch fresh data
  schedule:
    - cron: '0 0 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci
        
      - name: Ensure data directory exists
        run: mkdir -p public/data
        
      - name: Fetch API data
        run: |
          curl -X GET 'https://crm.secretstartups.org/api/users' -H 'accept: application/json' > public/data/associates.json
          
      # Preflight check - make sure the data was fetched successfully and has enough entries
      - name: Verify API data
        run: |
          if [ -s public/data/associates.json ]; then
            echo "API data fetched successfully"
            # Count the number of items in the JSON array
            ITEM_COUNT=$(jq length public/data/associates.json)
            echo "Found $ITEM_COUNT associates in API response"
            
            # If we have fewer than 6 items, add some fallback entries 
            if [ "$ITEM_COUNT" -lt 6 ]; then
              echo "Adding fallback entries to ensure at least 6 associates"
              # Create or update with a more comprehensive fallback
              cat > public/data/associates.json << 'EOL'
[
  {
    "id": "api-user-1",
    "name": "Alex Johnson",
    "email": "alex.j@secretstartups.org",
    "role": "Frontend Developer",
    "skills": ["React", "TypeScript", "Tailwind CSS"],
    "image": "/assets/ss-avatar.png"
  },
  {
    "id": "api-user-2",
    "name": "Sam Williams",
    "email": "sam.w@secretstartups.org",
    "role": "Backend Developer",
    "skills": ["Node.js", "Express", "MongoDB"],
    "image": "/assets/ss-avatar.png"
  },
  {
    "id": "api-user-3",
    "name": "Jamie Taylor",
    "email": "jamie.t@secretstartups.org",
    "role": "Full Stack Developer",
    "skills": ["React", "Node.js", "PostgreSQL"],
    "image": "/assets/ss-avatar.png"
  },
  {
    "id": "api-user-4",
    "name": "Morgan Lee",
    "email": "morgan.l@secretstartups.org",
    "role": "DevOps Engineer",
    "skills": ["Docker", "Kubernetes", "AWS"],
    "image": "/assets/ss-avatar.png"
  },
  {
    "id": "api-user-5",
    "name": "Casey Chen",
    "email": "casey.c@secretstartups.org",
    "role": "Mobile Developer",
    "skills": ["Flutter", "React Native", "Firebase"],
    "image": "/assets/ss-avatar.png"
  },
  {
    "id": "api-user-6",
    "name": "Jordan Patel",
    "email": "jordan.p@secretstartups.org",
    "role": "UX/UI Designer",
    "skills": ["Figma", "Adobe XD", "Sketch"],
    "image": "/assets/ss-avatar.png"
  }
]
EOL
            fi
          else
            echo "API data fetch failed, creating fallback data"
            # Create minimal fallback data
            cat > public/data/associates.json << 'EOL'
[
  {
    "id": "fallback-1",
    "name": "Alex Johnson",
    "email": "alex.j@secretstartups.org",
    "role": "Frontend Developer",
    "skills": ["React", "TypeScript", "Tailwind CSS"],
    "image": "/assets/ss-avatar.png"
  },
  {
    "id": "fallback-2",
    "name": "Sam Williams",
    "email": "sam.w@secretstartups.org",
    "role": "Backend Developer",
    "skills": ["Node.js", "Express", "MongoDB"],
    "image": "/assets/ss-avatar.png"
  },
  {
    "id": "fallback-3",
    "name": "Jamie Taylor",
    "email": "jamie.t@secretstartups.org",
    "role": "Full Stack Developer",
    "skills": ["React", "Node.js", "PostgreSQL"],
    "image": "/assets/ss-avatar.png"
  },
  {
    "id": "fallback-4",
    "name": "Morgan Lee",
    "email": "morgan.l@secretstartups.org",
    "role": "DevOps Engineer",
    "skills": ["Docker", "Kubernetes", "AWS"],
    "image": "/assets/ss-avatar.png"
  },
  {
    "id": "fallback-5",
    "name": "Casey Chen",
    "email": "casey.c@secretstartups.org",
    "role": "Mobile Developer",
    "skills": ["Flutter", "React Native", "Firebase"],
    "image": "/assets/ss-avatar.png"
  },
  {
    "id": "fallback-6",
    "name": "Jordan Patel",
    "email": "jordan.p@secretstartups.org",
    "role": "UX/UI Designer",
    "skills": ["Figma", "Adobe XD", "Sketch"],
    "image": "/assets/ss-avatar.png"
  }
]
EOL
          fi

      - name: Build project
        run: npm run build

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4